/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LandingPage } from "./LandingPage";
import { LandingPageCountArgs } from "./LandingPageCountArgs";
import { LandingPageFindManyArgs } from "./LandingPageFindManyArgs";
import { LandingPageFindUniqueArgs } from "./LandingPageFindUniqueArgs";
import { CreateLandingPageArgs } from "./CreateLandingPageArgs";
import { UpdateLandingPageArgs } from "./UpdateLandingPageArgs";
import { DeleteLandingPageArgs } from "./DeleteLandingPageArgs";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { LandingPageService } from "../landingPage.service";
@graphql.Resolver(() => LandingPage)
export class LandingPageResolverBase {
  constructor(protected readonly service: LandingPageService) {}

  async _landingPagesMeta(
    @graphql.Args() args: LandingPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LandingPage])
  async landingPages(
    @graphql.Args() args: LandingPageFindManyArgs
  ): Promise<LandingPage[]> {
    return this.service.landingPages(args);
  }

  @graphql.Query(() => LandingPage, { nullable: true })
  async landingPage(
    @graphql.Args() args: LandingPageFindUniqueArgs
  ): Promise<LandingPage | null> {
    const result = await this.service.landingPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LandingPage)
  async createLandingPage(
    @graphql.Args() args: CreateLandingPageArgs
  ): Promise<LandingPage> {
    return await this.service.createLandingPage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LandingPage)
  async updateLandingPage(
    @graphql.Args() args: UpdateLandingPageArgs
  ): Promise<LandingPage | null> {
    try {
      return await this.service.updateLandingPage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LandingPage)
  async deleteLandingPage(
    @graphql.Args() args: DeleteLandingPageArgs
  ): Promise<LandingPage | null> {
    try {
      return await this.service.deleteLandingPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Course], { name: "courses" })
  async findCourses(
    @graphql.Parent() parent: LandingPage,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
