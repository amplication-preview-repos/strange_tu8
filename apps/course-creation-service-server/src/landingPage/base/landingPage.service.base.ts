/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LandingPage as PrismaLandingPage,
  Course as PrismaCourse,
} from "@prisma/client";

export class LandingPageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LandingPageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.landingPage.count(args);
  }

  async landingPages(
    args: Prisma.LandingPageFindManyArgs
  ): Promise<PrismaLandingPage[]> {
    return this.prisma.landingPage.findMany(args);
  }
  async landingPage(
    args: Prisma.LandingPageFindUniqueArgs
  ): Promise<PrismaLandingPage | null> {
    return this.prisma.landingPage.findUnique(args);
  }
  async createLandingPage(
    args: Prisma.LandingPageCreateArgs
  ): Promise<PrismaLandingPage> {
    return this.prisma.landingPage.create(args);
  }
  async updateLandingPage(
    args: Prisma.LandingPageUpdateArgs
  ): Promise<PrismaLandingPage> {
    return this.prisma.landingPage.update(args);
  }
  async deleteLandingPage(
    args: Prisma.LandingPageDeleteArgs
  ): Promise<PrismaLandingPage> {
    return this.prisma.landingPage.delete(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<PrismaCourse[]> {
    return this.prisma.landingPage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courses(args);
  }
}
